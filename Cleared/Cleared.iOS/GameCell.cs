// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using Cleared.ViewModels;
using Foundation;
using UIKit;
using XAnimations;
using System.Collections.Generic;
using CoreGraphics;

namespace Cleared.iOS
{
    public partial class GameCell : UICollectionViewCell, IUpdateable
    {
        public const string CellID = "GameCell";
        //BaseViewAnimator animation;

        public GameCell (IntPtr handle) : base (handle)
        {
        }

        public List<UIColor> ColorPalette { get; set; }

        public bool ShowMarker { get; set; } = false;

        public UIColor MarkerColor
        {
            get { return markerView.BackgroundColor; }
            set { markerView.BackgroundColor = value; }
        }

        public bool ShowHighlight
        {
            get { return !highlightView.Hidden; }
            set { highlightView.Hidden = !value; }
        }

        UIColor highlightColor = null;
        public UIColor HighlightColor
        {
            get { return highlightColor; }
            set { highlightView.BackgroundColor = value; highlightColor = value; }
        }

        SquareDataViewModel viewModel;
        public SquareDataViewModel ViewModel
        {
            get { return viewModel; }
            set
            {
                viewModel = value;
                //DoUpdateView(true);
            }
        }

        async Task DoUpdateView(bool force, int delay = 0)
        {
            UserInteractionEnabled = false;

            if (ViewModel == null)
                return;

            ArrowView.Hidden = string.IsNullOrWhiteSpace(viewModel.Text) || !viewModel.MarkerVisible;

            if (ColorPalette != null && viewModel.Fixed)
            {
                var colorIndex = viewModel.PaletteIndex % ColorPalette.Count;
                MarkerColor = ColorPalette[colorIndex];
            }


            ShowHighlight = viewModel.TouchState == TouchState.Touching;

            var newShowMarker = viewModel.MarkerVisible;
            if ((ShowMarker != newShowMarker) || force)
            {
                //animation?.Stop();

                if (force)
                {
                    if (!ViewModel.Fixed)
                        MarkerColor = DefaultMarkerColor;
                }

                if (!newShowMarker)
                {
                    markerView.Alpha = 1;
                    markerView.Transform = CGAffineTransform.MakeScale(1f, 1f);

                    await AnimateAsync(0.3, () =>
                        {
                            markerView.Alpha = 0;
                            markerView.Transform = CGAffineTransform.MakeScale(1.5f, 1.5f);
                        });

					//animation = markerView
					//    .CreateAnimator<TakingOffAnimator>()
					//    .SetStartDelay(delay)
					//    .SetDuration(300);
					//await animation.Animate();
					//animation = null;
                    ShowMarker = newShowMarker;
                }
                else
                {
                    markerView.Alpha = 0;
                    markerView.Transform = CGAffineTransform.MakeScale(1.5f, 1.5f);
                    ShowMarker = newShowMarker;
					//animation = markerView.CreateAnimator<LandingAnimator>();
					//await animation.Animate();
					//animation = null;

					await AnimateAsync(0.3, () =>
					{
						markerView.Alpha = 1;
                        markerView.Transform = CGAffineTransform.MakeScale(1.0f, 1.0f);
					});
				}
            }
        }

        public Task Update(bool forced = false, int delay = 0)
        {
            return DoUpdateView(forced, delay);
        }

        static UIColor defaultMarkerColor = null;
        UIColor DefaultMarkerColor
        {
            get
            {
                if (defaultMarkerColor == null)
                    defaultMarkerColor = new UIColor(1f, 1f, 1f, 0.5f);
                return defaultMarkerColor;
            }
        }

    }
}
