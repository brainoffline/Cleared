// This file has been autogenerated from a class added in the UI designer.

using System;
using Cleared.Model;
using Foundation;
using UIKit;

namespace Cleared.iOS
{
	public partial class SelectGameViewController : UIViewController
	{
        public GameSet GameSet { get; set; }
        public GameDefinition SelectedGame { get; set; }

        public SelectGameViewController() {}
		public SelectGameViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            Heading.Text = GameSet.Name;
            View.BackgroundColor = GameSet.Color.ToUIColor();

			Grid.ShowsHorizontalScrollIndicator = false;
			Grid.ShowsVerticalScrollIndicator = false;

            LayoutGrid();

            Grid.Source = new SelectGameDataSource(this, GameSet);

		}

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            if (SelectedGame != null)
            {
                SelectedGame = null;
                Grid.ReloadData();
            }
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            LayoutGrid();
        }

        void LayoutGrid() 
        {
			var gridWidth = Grid.Frame.Width;
			var gridHeight = Grid.Frame.Height;
			// For now, we know this is 5x5 cells

			var cellWidth = Math.Floor(Math.Min(gridWidth, gridHeight) / 5f);
			((UICollectionViewFlowLayout)Grid.CollectionViewLayout).ItemSize = new CoreGraphics.CGSize(cellWidth, cellWidth);

            if (gridHeight > gridWidth)
            {
                ((UICollectionViewFlowLayout)Grid.CollectionViewLayout).HeaderReferenceSize = 
                    new CoreGraphics.CGSize(0, (gridHeight - gridWidth) / 3);
            }
		}

		void ClearSelected()
		{
            var data = (SelectGameDataSource)Grid.Source;
            for (int i = 0; i < GameSet.GameCount; i++)
            {
                var path = NSIndexPath.FromIndex((System.nuint)i);
                var cell = data.GetCell(Grid, path) as SelectGameCell;
                cell.Selected = false;

				var highScore = GameData.Current.GetGameHighScore(cell.GameDefinition as GameDefinition);
                cell.BackgroundColor = highScore == null ? "#FF0000".ToUIColor(0.5f) : "#FF0000".ToUIColor(0);
            }
		}

        public void Launch(GameDefinition game) 
        {
            SelectedGame = game;
            PerformSegue("PlaySegue", this);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            //base.PrepareForSegue(segue, sender);

            var playVC = segue.DestinationViewController as PlayViewController;
            if (playVC == null)
                return;

            playVC.GameDefinition = SelectedGame;
        }

	}

    internal class SelectGameDataSource : UICollectionViewSource
    {
        GameSet GameSet { get; set; }
        SelectGameViewController ViewController;

        public SelectGameDataSource(SelectGameViewController vc, GameSet gameSet)
        {
            ViewController = vc;
            GameSet = gameSet;
        }

		public override nint GetItemsCount(UICollectionView collectionView, nint section)
		{
			return GameSet.GameCount;
		}

		public override UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath)
        {
			var game = GameSet.Games[(int)indexPath.Item];

			var cell = collectionView.DequeueReusableCell(SelectGameCell.CellID, indexPath) as SelectGameCell;
            if (cell.GameDefinition == null)
            {
                cell.Tapped += (sender, e) => 
                {
                    var selectedCell = sender as SelectGameCell;
                    if (selectedCell == null) return;

                    ViewController.Launch(selectedCell.GameDefinition);
                };
            }
            cell.SetGame(game);
            cell.SetGameHighScore(GameData.Current.GetGameHighScore(cell.GameDefinition as GameDefinition));

			return cell;
        }

        public override void ItemHighlighted(UICollectionView collectionView, NSIndexPath indexPath)
        {
			var cell = (SelectGameCell)collectionView.CellForItem(indexPath);
        }

        public override void ItemUnhighlighted(UICollectionView collectionView, NSIndexPath indexPath)
        {
            var cell = (SelectGameCell)collectionView.CellForItem(indexPath);
        }


    }
}
